image: Visual Studio 2017

# NOTE: This is called BEFORE the repo is cloned
init:
  - ps: |
      $releaseVersionPattern = '^\d+\.\d+\.\d+$'

      if( $env:APPVEYOR_REPO_TAG -eq 'true' ) {
          # Tag pushes are used to trigger pipeline runs that produce releasea packages. These should always be done
          # from the master branch. If not, then treat that as an error.
          if( $env:APPVEYOR_REPO_BRANCH -ne 'master' ) {
              throw "Unexpected tag pushed to branch other than master."
          }

          # If a tag was pushed to the master branch, make sure it's a vald semantic version for one of our release
          # packages, i.e., is of the form X.Y.Z.
          if( $env:APPVEYOR_REPO_TAG_NAME -notmatch $releaseVersionPattern ) {
              throw "Failed to produce release package. Invalid tag $env:APPVEYOR_REPO_TAG_NAME pushed to master branch."
          }

          # Use the tag as the version for this pipeline run.
          $baseVersion = $env:APPVEYOR_REPO_TAG_NAME
          $prereleaseTag = $null
      }
      else {
          # This pipeline run will produce a prerelease package. We need a base version number that's semantically
          # greater than our last release. For prerelease purposes, we'll take the latest release version and bump the
          # patch number. Then we generate a prerelease tag that is (hopefully) valid with PowerShellGet/NuGet and tack
          # that on to the end of the version string.
          #
          # The prerelease tag will be derived from the following bits of information to make version numbers that will
          # sort correctly when done lexicographically (which is how PowerShellGet operates... using a SemVer 1.0.0-ish
          # scheme): build date, build time, and build number.
          #
          # To get the list of tags currently in our project's repository, we'll use git ls-remote and filter for only
          # those tags that look like a valid release version number (X.Y.Z). We'll then sort to find the latest one.
          # Note that once Git 2.18 is released, we can use --sort parameter on git ls-remote. But for now, we have to
          # do the sort ourselves.
          #
          # Also note that git ls-remote returns a list of output where each line is the following form:
          # <hash> refs/tags/<tag name>.
          #
          # So we'll need to do some parsing to get out the tag names themselves.
          #
          $repoUrl = "https://github.com/$env:APPVEYOR_REPO_NAME"
          $latestTag = git ls-remote --tags --refs $repoUrl |
              % { $_ -split '\s+' | Select-Object -Index 1 } |
              % { $_ -split '/' | Select-Object -Index 2 } |
              ? { $_ -match $releaseVersionPattern } |
              % { [Version]$_ } |
              Sort-Object -Descending |
              % { $_.ToString() } |
              Select-Object -First 1

          if( $latestTag ) {
              # Bump the patch version. First break the release version into version components.
              $versionComponents = $latestTag -split '\.' | % { [int]$_ }
              $versionComponents[2]++
              $baseVersion = $versionComponents -join '.'
          }
          else {
              # The repository has no release versions. Use 0.0.0 as the default base version number.
              $baseVersion = "0.0.0"
          }

          # Compute the prerelease tag for the CI package. Since this will be used for versioning a PowerShell module,
          # and PowerShellGet only supports a SemVer 1.0.0-ish versioning scheme, we want to make sure we produce a
          # prerelease tag that orders prerelease packages correctly when the prerelease package version numbers are
          # sorted lexicographically. To do this, we use the following (rather ugly) prerelease tag format:
          #
          #     ciyyyyMMddTHHmmssbN
          #
          # yyyyMMdd and HHmmss are respectively the date and time of this pipeline's run. The N is the build number
          # automatically generated by AppVeyor. The timestamp is taken to be UTC.
          #
          $prereleaseTag = (Get-Date).ToUniversalTime().ToString( "ciyyyyMMddTHHmmssb$env:APPVEYOR_BUILD_NUMBER" )
      }

      $version = if( $prereleaseTag ) { "$baseVersion-$prereleaseTag" } else { $baseVersion }
      $env:BASE_VERSION_NUMBER = $baseVersion
      $env:PRERELEASE_TAG = $prereleaseTag
      Update-AppveyorBuild -Version $version

install:
  - ps: |
      & $env:APPVEYOR_BUILD_FOLDER\pipeline\scripts\Update-PowerShellGet
  - ps: |
      & $env:APPVEYOR_BUILD_FOLDER\pipeline\scripts\Install-BuildDependencies

# nuget:
#   project_feed: true
#   disable_publish_on_pr: true

# before_build:
#   - ps: command

build_script:
  - ps: |
      & $env:APPVEYOR_BUILD_FOLDER\psake BuildModule

# # XXX: This might not be useful since this is used in conjunction with auto packaging, which is
# # done when msbuild config is used.
# before_package:
#   - ps: command

# after_build:

# before_test:
#   - ps: command

# test_script:
#   - ps: command

# after_test:
#   - ps: command

# artifacts:
#   - path: '*.nupkg'
#     name: EnablePython.nupkg

# deploy:
#   - provider: NuGet
#     server: nuget gallery
#     api_key:
#       secure: apikey
#     artifact: EnablePython.nupkg

# # Alternatively custom deploy:
# #before_deploy:
# #
# #deploy_script:
# #
# #after_deploy:
